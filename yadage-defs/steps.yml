prepare:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'python jo_maker/make_jobo.py jo_maker/template.py {evgen_joboptions} {keywords} dummy_description example_evgen {proc_card} {contact}'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      joboptions: evgen_joboptions
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/generic_evgen
    resources:
      - CVMFS

generate:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env.sh && Generate_tf.py --ecmEnergy={ecmEnergy} --runNumber={DSID} --firstEvent=1 --asetup="" --maxEvents={nevents} --randomSeed={seed} --jobConfig={joboptions} --outputEVNTFile={ouputEVNT}'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      ouputEVNT: ouputEVNT
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/generic_evgen
    resources:
      - CVMFS

dumphepmc: 
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env.sh && athena.py -c ''"''"''INPUT=["{inputevgen}"];OUTPUT="{outputhepmc}"''"''"'' McParticleAlgs/GenEventAsciiWriter_jobOptions.py'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      hepmcfile: outputhepmc
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/generic_evgen
    resources:
      - CVMFS

simulation:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env_with_voms.sh AtlasProduction,20.7.5.1,here && Sim_tf.py --AMIConfig {AMItag} --inputEvgenFile {evgenfile} --outputHitsFile {hitsfile} --maxEvents {maxevts} --skipEvents 0 --randomSeed {simseed}'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      hitsfile: hitsfile
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/athena_trfsbase
    resources:
      - CVMFS
      - GRIDProxy

digitization:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env.sh AtlasProduction,20.7.5.1,here && Reco_tf.py --inputHitsFile {hitsfile} --outputRDOFile {rdofile} --maxEvents {maxevts} --skipEvents 0 --conditionsTag {conditions} --geometryVersion {geometry}'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      rdofile: rdofile
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/athena_trfsbase
    resources:
      - CVMFS


reconstruction:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env_with_voms.sh AtlasProduction,20.7.5.1,here && Reco_tf.py --inputRDOFile {rdofile} --outputESDFile {esdfile} --outputAODFile {aodfile} --maxEvents {maxevts} --skipEvents 0 --conditionsTag {conditions} --geometryVersion {geometry} --postInclude default:RecJobTransforms/UseFrontier.py'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      esdfile: esdfile
      aodfile: aodfile
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/athena_trfsbase
    resources:
      - CVMFS
      - GRIDProxy

derivation:
  process:
    process_type: 'string-interpolated-cmd'
    cmd: 'source resources/env_with_voms.sh AtlasDerivation,20.7.6.2,here && Reco_tf.py --AMI {ptag} --inputAODFile {aodfile} --outputDAODFile my.DAOD.pool.root && cp *my.DAOD.pool.root {daodfile}'
  publisher:
    publisher_type: 'frompar-pub'
    outputmap:
      daodfile: daodfile
  environment:
    environment_type: 'docker-encapsulated'
    image: lukasheinrich/athena_trfsbase
    resources:
      - CVMFS
      - GRIDProxy


